// Mocks generated by Mockito 5.4.0 from annotations
// in venues_per_location/test/ui/controller/venues_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i5;
import 'package:venues_per_location/domain/entity/venue_entity.dart' as _i8;
import 'package:venues_per_location/domain/repository/locations_repository.dart'
    as _i3;
import 'package:venues_per_location/domain/repository/venues_repository.dart'
    as _i2;
import 'package:venues_per_location/domain/use_case/get_venues_per_location_use_case.dart'
    as _i6;
import 'package:venues_per_location/domain/use_case/set_favorite_venue_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVenuesRepository_0 extends _i1.SmartFake
    implements _i2.VenuesRepository {
  _FakeVenuesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationsRepository_1 extends _i1.SmartFake
    implements _i3.LocationsRepository {
  _FakeLocationsRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSetFavoriteVenueUseCase_2 extends _i1.SmartFake
    implements _i4.SetFavoriteVenueUseCase {
  _FakeSetFavoriteVenueUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehaviorSubject_3<T> extends _i1.SmartFake
    implements _i5.BehaviorSubject<T> {
  _FakeBehaviorSubject_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetVenuesPerLocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVenuesPerLocationUseCase extends _i1.Mock
    implements _i6.GetVenuesPerLocationUseCase {
  MockGetVenuesPerLocationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VenuesRepository get venuesRepository => (super.noSuchMethod(
        Invocation.getter(#venuesRepository),
        returnValue: _FakeVenuesRepository_0(
          this,
          Invocation.getter(#venuesRepository),
        ),
      ) as _i2.VenuesRepository);
  @override
  _i3.LocationsRepository get locationsRepository => (super.noSuchMethod(
        Invocation.getter(#locationsRepository),
        returnValue: _FakeLocationsRepository_1(
          this,
          Invocation.getter(#locationsRepository),
        ),
      ) as _i3.LocationsRepository);
  @override
  _i4.SetFavoriteVenueUseCase get setFavoriteVenueUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#setFavoriteVenueUseCase),
        returnValue: _FakeSetFavoriteVenueUseCase_2(
          this,
          Invocation.getter(#setFavoriteVenueUseCase),
        ),
      ) as _i4.SetFavoriteVenueUseCase);
  @override
  _i7.Stream<List<_i8.VenueEntity>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i7.Stream<List<_i8.VenueEntity>>.empty(),
      ) as _i7.Stream<List<_i8.VenueEntity>>);
}

/// A class which mocks [SetFavoriteVenueUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetFavoriteVenueUseCase extends _i1.Mock
    implements _i4.SetFavoriteVenueUseCase {
  MockSetFavoriteVenueUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VenuesRepository get venuesRepository => (super.noSuchMethod(
        Invocation.getter(#venuesRepository),
        returnValue: _FakeVenuesRepository_0(
          this,
          Invocation.getter(#venuesRepository),
        ),
      ) as _i2.VenuesRepository);
  @override
  _i5.BehaviorSubject<List<String>> get controller => (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeBehaviorSubject_3<List<String>>(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i5.BehaviorSubject<List<String>>);
  @override
  _i7.Stream<List<String>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<List<String>>.empty(),
      ) as _i7.Stream<List<String>>);
  @override
  _i7.Future<void> read() => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> call({
    required String? id,
    required bool? isFavorite,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #id: id,
            #isFavorite: isFavorite,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
